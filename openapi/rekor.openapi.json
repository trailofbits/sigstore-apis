{"openapi":"3.0.1","info":{"title":"Rekor","description":"Rekor is a cryptographically secure, immutable transparency log for signed software releases.","version":"1.0.0"},"servers":[{"url":"http://rekor.sigstore.dev/"}],"paths":{"/api/v1/index/retrieve":{"post":{"tags":["index"],"summary":"Searches index by entry metadata","description":"EXPERIMENTAL - this endpoint is offered as best effort only and may be changed or removed in future releases.\nThe results returned from this endpoint may be incomplete.\n","operationId":"searchIndex","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SearchIndex"}}},"required":true},"responses":{"2XX":{"description":"Returns zero or more entry UUIDs from the transparency log based on search query","content":{"application/json":{"schema":{"type":"array","items":{"pattern":"^([0-9a-fA-F]{64}|[0-9a-fA-F]{80})$","type":"string","description":"Entry UUID in transparency log"}}}}},"default":{"description":"An issue occurred while processing the request.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Error"}}}}},"deprecated":true,"x-codegen-request-body-name":"query"}},"/api/v1/log":{"get":{"tags":["tlog"],"summary":"Get information about the current state of the transparency log","description":"Returns the current root hash and size of the merkle tree used to store the log entries.","operationId":"getLogInfo","parameters":[{"name":"stable","in":"query","description":"Whether to return a stable checkpoint for the active shard","schema":{"type":"boolean","default":false}}],"responses":{"2XX":{"description":"A JSON object with the root hash and tree size as properties","content":{"application/json":{"schema":{"$ref":"#/components/schemas/LogInfo"}}}},"default":{"description":"An issue occurred while processing the request.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Error"}}}}}}},"/api/v1/log/publicKey":{"get":{"tags":["pubkey"],"summary":"Retrieve the public key that can be used to validate the signed tree head","description":"Returns the public key that can be used to validate the signed tree head","operationId":"getPublicKey","parameters":[{"name":"treeID","in":"query","description":"The tree ID of the tree you wish to get a public key for","schema":{"pattern":"^[0-9]+$","type":"string"}}],"responses":{"2XX":{"description":"The public key","content":{"application/x-pem-file":{"schema":{"type":"string"}}}},"default":{"description":"An issue occurred while processing the request.","content":{"application/x-pem-file":{"schema":{"$ref":"#/components/schemas/Error"}}}}}}},"/api/v1/log/proof":{"get":{"tags":["tlog"],"summary":"Get information required to generate a consistency proof for the transparency log","description":"Returns a list of hashes for specified tree sizes that can be used to confirm the consistency of the transparency log","operationId":"getLogProof","parameters":[{"name":"firstSize","in":"query","description":"The size of the tree that you wish to prove consistency from (1 means the beginning of the log) Defaults to 1 if not specified\n","schema":{"minimum":1,"type":"integer","default":1}},{"name":"lastSize","in":"query","description":"The size of the tree that you wish to prove consistency to","required":true,"schema":{"minimum":1,"type":"integer"}},{"name":"treeID","in":"query","description":"The tree ID of the tree that you wish to prove consistency for","schema":{"pattern":"^[0-9]+$","type":"string"}}],"responses":{"2XX":{"description":"All hashes required to compute the consistency proof","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConsistencyProof"}}}},"default":{"description":"An issue occurred while processing the request.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Error"}}}}}}},"/api/v1/log/entries":{"get":{"tags":["entries"],"summary":"Retrieves an entry and inclusion proof from the transparency log (if it exists) by index","operationId":"getLogEntryByIndex","parameters":[{"name":"logIndex","in":"query","description":"specifies the index of the entry in the transparency log to be retrieved","required":true,"schema":{"minimum":0,"type":"integer"}}],"responses":{"2XX":{"description":"the entry in the transparency log requested along with an inclusion proof","content":{"application/json":{"schema":{"$ref":"#/components/schemas/LogEntry"}}}},"default":{"description":"An issue occurred while processing the request.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Error"}}}}}},"post":{"tags":["entries"],"summary":"Creates an entry in the transparency log","description":"Creates an entry in the transparency log for a detached signature, public key, and content. Items can be included in the request or fetched by the server when URLs are specified.\n","operationId":"createLogEntry","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ProposedEntry"}}},"required":true},"responses":{"2XX":{"description":"Returns the entry created in the transparency log","headers":{"ETag":{"description":"UUID of log entry","schema":{"type":"string"}},"Location":{"description":"URI location of log entry","schema":{"type":"string","format":"uri"}}},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/LogEntry"}}}},"default":{"description":"An issue occurred while processing the request.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Error"}}}}},"x-codegen-request-body-name":"proposedEntry"}},"/api/v1/log/entries/{entryUUID}":{"get":{"tags":["entries"],"summary":"Get log entry and information required to generate an inclusion proof for the entry in the transparency log","description":"Returns the entry, root hash, tree size, and a list of hashes that can be used to calculate proof of an entry being included in the transparency log","operationId":"getLogEntryByUUID","parameters":[{"name":"entryUUID","in":"path","description":"the UUID of the entry for which the inclusion proof information should be returned","required":true,"schema":{"pattern":"^([0-9a-fA-F]{64}|[0-9a-fA-F]{80})$","type":"string"}}],"responses":{"2XX":{"description":"Information needed for a client to compute the inclusion proof","content":{"application/json":{"schema":{"$ref":"#/components/schemas/LogEntry"}}}},"default":{"description":"An issue occurred while processing the request.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Error"}}}}}}},"/api/v1/log/entries/retrieve":{"post":{"tags":["entries"],"summary":"Searches transparency log for one or more log entries","operationId":"searchLogQuery","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SearchLogQuery"}}},"required":true},"responses":{"2XX":{"description":"Returns zero or more entries from the transparency log, according to how many were included in request query","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/LogEntry"}}}}},"default":{"description":"An issue occurred while processing the request.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Error"}}}}},"x-codegen-request-body-name":"entry"}}},"components":{"schemas":{"ProposedEntry":{"required":["kind"],"type":"object","properties":{"kind":{"type":"string"}},"discriminator":{"propertyName":"kind"}},"rekord":{"description":"Rekord object","allOf":[{"$ref":"#/components/schemas/ProposedEntry"},{"required":["apiVersion","spec"],"type":"object","properties":{"apiVersion":{"pattern":"^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$","type":"string"},"spec":{"title":"Rekor Schema","type":"object","properties":{},"description":"Schema for Rekord objects"}},"additionalProperties":false}]},"hashedrekord":{"description":"Hashed Rekord object","allOf":[{"$ref":"#/components/schemas/ProposedEntry"},{"required":["apiVersion","spec"],"type":"object","properties":{"apiVersion":{"pattern":"^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$","type":"string"},"spec":{"title":"Rekor Schema","type":"object","properties":{},"description":"Schema for Rekord objects"}},"additionalProperties":false}]},"rpm":{"description":"RPM package","allOf":[{"$ref":"#/components/schemas/ProposedEntry"},{"required":["apiVersion","spec"],"type":"object","properties":{"apiVersion":{"pattern":"^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$","type":"string"},"spec":{"title":"RPM Schema","type":"object","properties":{},"description":"Schema for RPM objects"}},"additionalProperties":false}]},"tuf":{"description":"TUF metadata","allOf":[{"$ref":"#/components/schemas/ProposedEntry"},{"required":["apiVersion","spec"],"type":"object","properties":{"apiVersion":{"pattern":"^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$","type":"string"},"spec":{"title":"TUF Schema","type":"object","properties":{},"description":"Schema for TUF metadata objects"}},"additionalProperties":false}]},"alpine":{"description":"Alpine package","allOf":[{"$ref":"#/components/schemas/ProposedEntry"},{"required":["apiVersion","spec"],"type":"object","properties":{"apiVersion":{"pattern":"^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$","type":"string"},"spec":{"title":"Alpine Package Schema","type":"object","properties":{},"description":"Schema for Alpine package objects"}},"additionalProperties":false}]},"helm":{"description":"Helm chart","allOf":[{"$ref":"#/components/schemas/ProposedEntry"},{"required":["apiVersion","spec"],"type":"object","properties":{"apiVersion":{"pattern":"^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$","type":"string"},"spec":{"title":"Helm Schema","type":"object","properties":{},"description":"Schema for Helm objects"}}}]},"intoto":{"description":"Intoto object","allOf":[{"$ref":"#/components/schemas/ProposedEntry"},{"required":["apiVersion","spec"],"type":"object","properties":{"apiVersion":{"pattern":"^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$","type":"string"},"spec":{"title":"Intoto Schema","type":"object","properties":{},"description":"Intoto for Rekord objects"}},"additionalProperties":false}]},"cose":{"description":"COSE object","allOf":[{"$ref":"#/components/schemas/ProposedEntry"},{"required":["apiVersion","spec"],"type":"object","properties":{"apiVersion":{"pattern":"^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$","type":"string"},"spec":{"title":"COSE Schema","type":"object","properties":{},"description":"COSE for Rekord objects"}},"additionalProperties":false}]},"jar":{"description":"Java Archive (JAR)","allOf":[{"$ref":"#/components/schemas/ProposedEntry"},{"required":["apiVersion","spec"],"type":"object","properties":{"apiVersion":{"pattern":"^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$","type":"string"},"spec":{"title":"JAR Schema","type":"object","properties":{},"description":"Schema for JAR objects"}},"additionalProperties":false}]},"rfc3161":{"description":"RFC3161 Timestamp","allOf":[{"$ref":"#/components/schemas/ProposedEntry"},{"required":["apiVersion","spec"],"type":"object","properties":{"apiVersion":{"pattern":"^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$","type":"string"},"spec":{"title":"Timestamp Schema","type":"object","properties":{},"description":"Schema for RFC 3161 timestamp objects"}},"additionalProperties":false}]},"dsse":{"description":"DSSE envelope","allOf":[{"$ref":"#/components/schemas/ProposedEntry"},{"required":["apiVersion","spec"],"type":"object","properties":{"apiVersion":{"pattern":"^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$","type":"string"},"spec":{"title":"DSSE Schema","type":"object","properties":{},"description":"log entry schema for dsse envelopes"}},"additionalProperties":false}]},"LogEntry":{"type":"object","additionalProperties":{"required":["body","integratedTime","logID","logIndex"],"type":"object","properties":{"logID":{"pattern":"^[0-9a-fA-F]{64}$","type":"string","description":"This is the SHA256 hash of the DER-encoded public key for the log at the time the entry was included in the log"},"logIndex":{"minimum":0,"type":"integer"},"body":{"type":"object","additionalProperties":true},"integratedTime":{"type":"integer","description":"The time the entry was added to the log as a Unix timestamp in seconds"},"attestation":{"type":"string"},"verification":{"type":"object","properties":{"inclusionProof":{"$ref":"#/components/schemas/InclusionProof"},"signedEntryTimestamp":{"pattern":"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$","type":"string","description":"Signature over the logID, logIndex, body and integratedTime.","format":"byte"}}}}}},"SearchIndex":{"type":"object","properties":{"email":{"type":"string","format":"email"},"publicKey":{"required":["format"],"type":"object","properties":{"format":{"type":"string","enum":["pgp","x509","minisign","ssh","tuf"]},"content":{"pattern":"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$","type":"string","format":"byte"},"url":{"type":"string","format":"uri"}}},"hash":{"pattern":"^(sha512:)?[0-9a-fA-F]{128}$|^(sha256:)?[0-9a-fA-F]{64}$|^(sha1:)?[0-9a-fA-F]{40}$","type":"string"},"operator":{"type":"string","enum":["and","or"]}}},"SearchLogQuery":{"type":"object","properties":{"entryUUIDs":{"maxItems":10,"minItems":1,"type":"array","items":{"pattern":"^([0-9a-fA-F]{64}|[0-9a-fA-F]{80})$","type":"string"}},"logIndexes":{"maxItems":10,"minItems":1,"type":"array","items":{"minimum":0,"type":"integer"}},"entries":{"maxItems":10,"minItems":1,"type":"array","items":{"$ref":"#/components/schemas/ProposedEntry"}}}},"LogInfo":{"required":["rootHash","signedTreeHead","treeID","treeSize"],"type":"object","properties":{"rootHash":{"pattern":"^[0-9a-fA-F]{64}$","type":"string","description":"The current hash value stored at the root of the merkle tree"},"treeSize":{"minimum":1,"type":"integer","description":"The current number of nodes in the merkle tree"},"signedTreeHead":{"type":"string","description":"The current signed tree head","format":"signedCheckpoint"},"treeID":{"pattern":"^[0-9]+$","type":"string","description":"The current treeID"},"inactiveShards":{"type":"array","items":{"$ref":"#/components/schemas/InactiveShardLogInfo"}}}},"InactiveShardLogInfo":{"required":["rootHash","signedTreeHead","treeID","treeSize"],"type":"object","properties":{"rootHash":{"pattern":"^[0-9a-fA-F]{64}$","type":"string","description":"The current hash value stored at the root of the merkle tree"},"treeSize":{"minimum":1,"type":"integer","description":"The current number of nodes in the merkle tree"},"signedTreeHead":{"type":"string","description":"The current signed tree head","format":"signedCheckpoint"},"treeID":{"pattern":"^[0-9]+$","type":"string","description":"The current treeID"}}},"ConsistencyProof":{"required":["hashes","rootHash"],"type":"object","properties":{"rootHash":{"pattern":"^[0-9a-fA-F]{64}$","type":"string","description":"The hash value stored at the root of the merkle tree at the time the proof was generated"},"hashes":{"type":"array","items":{"pattern":"^[0-9a-fA-F]{64}$","type":"string","description":"SHA256 hash value expressed in hexadecimal format"}}}},"InclusionProof":{"required":["checkpoint","hashes","logIndex","rootHash","treeSize"],"type":"object","properties":{"logIndex":{"minimum":0,"type":"integer","description":"The index of the entry in the transparency log"},"rootHash":{"pattern":"^[0-9a-fA-F]{64}$","type":"string","description":"The hash value stored at the root of the merkle tree at the time the proof was generated"},"treeSize":{"minimum":1,"type":"integer","description":"The size of the merkle tree at the time the inclusion proof was generated"},"hashes":{"type":"array","description":"A list of hashes required to compute the inclusion proof, sorted in order from leaf to root","items":{"pattern":"^[0-9a-fA-F]{64}$","type":"string","description":"SHA256 hash value expressed in hexadecimal format"}},"checkpoint":{"type":"string","description":"The checkpoint (signed tree head) that the inclusion proof is based on","format":"signedCheckpoint"}}},"Error":{"type":"object","properties":{"code":{"type":"integer"},"message":{"type":"string"}}}},"responses":{"BadContent":{"description":"The content supplied to the server was invalid","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Error"}}}},"Conflict":{"description":"The request conflicts with the current state of the transparency log","headers":{"Location":{"schema":{"type":"string","format":"uri"}}},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Error"}}}},"NotFound":{"description":"The content requested could not be found","content":{}},"InternalServerError":{"description":"There was an internal error in the server while processing the request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Error"}}}},"UnprocessableEntity":{"description":"The server understood the request but is unable to process the contained instructions","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Error"}}}}}},"x-original-swagger-version":"2.0"}